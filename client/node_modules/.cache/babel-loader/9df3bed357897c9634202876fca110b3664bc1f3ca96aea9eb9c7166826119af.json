{"ast":null,"code":"var _jsxFileName = \"/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [errorState, setErrorState] = useState(false);\n  const [banks, setBanks] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const navigate = useNavigate();\n  function handleLogin(username, password, setSubmitting, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      console.log(r);\n      if (r.ok) {\n        r.json().then(user => {\n          console.log(\"User\", user);\n          setUser(user);\n          setAccounts(user.accounts);\n          setTransactions(user.transactions);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(user => {\n          setUser(user);\n          console.log(\"User\", user);\n          setUser(user);\n          setAccounts(user.accounts);\n          setTransactions(user.transactions);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    });\n  }\n\n  // useEffect(() => {\n  //   if (!user) return;\n\n  //   // Optionally, create an AbortController if you want to cancel these fetches on unmount.\n  //   const controller = new AbortController();\n  //   const signal = controller.signal;\n\n  //   // Create an array of endpoint configs\n  //   const endpoints = [\n  //     { url: '/api/insights', setter: setCategories, errorMsg: 'Error fetching insights' },\n  //     { url: '/api/accounts', setter: setAccounts, errorMsg: 'Error fetching accounts' },\n  //     { url: '/api/transactions', setter: setTransactions, errorMsg: 'Error fetching transactions' }\n  //   ];\n\n  //   Promise.all(\n  //     endpoints.map(({ url }) =>\n  //       fetch(url, { method: 'GET', credentials: 'include', signal }).then(r => {\n  //         if (!r.ok) throw new Error(`Network error for ${url}`);\n  //         return r.json();\n  //       })\n  //     )\n  //   )\n  //     .then(([insightsData, accountsData, transactionsData]) => {\n  //       setCategories(insightsData);\n  //       setAccounts(accountsData);\n  //       setTransactions(transactionsData);\n  //     })\n  //     .catch(error => {\n  //       // If error is an AbortError, we can ignore it.\n  //       if (error.name !== 'AbortError') {\n  //         console.error(\"Error fetching data:\", error);\n  //         setLoading(false);\n  //       }\n  //     });\n\n  //   // Cleanup function to abort fetches on unmount.\n  //   return () => controller.abort();\n  // }, [user]);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //     fetch(`/api/insights`,{\n  //       method: 'GET',\n  //       credentials: 'include'\n  //     })\n  //     .then((r) => r.json())\n  //     .then(insightsData => {\n  //     setCategories(insightsData);\n  //   }).catch(error => {\n  //     console.log(\"Error fetching insights\", error)\n  //     setLoading(false);\n\n  //   });\n  // }, [user]);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //   fetch(`/api/accounts`,{\n  //     method: 'GET',\n  //     credentials: 'include'\n  //   })\n  //   .then((r) => r.json())\n  //   .then(accounts => {\n  //     setAccounts(accounts);\n  // }).catch(error => {\n  //   console.log(\"Error in fetching banks\", error)\n  //   setLoading(false);\n\n  // });\n  // }, [user]);\n\n  useEffect(() => {\n    if (!user) return;\n    fetch(`/api/banks`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(r => r.json()).then(banks => {\n      setBanks(banks);\n    }).catch(error => {\n      console.log(\"Error in fetching banks\", error);\n      setLoading(false);\n    });\n  }, []);\n  function handleNewAccountSubmission(bank_name, account_value, account_type, setSubmitting, navigate) {\n    fetch(`/api/accounts`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        bank_name,\n        account_value,\n        account_type\n      })\n    }).then(r => r.json()).then(data => {\n      if (data) {\n        setAccounts(...accounts, data);\n      } else {\n        console.log(\"Something went wrong\");\n        setSubmitting(false);\n        setErrorState(true);\n      }\n    });\n  }\n  useEffect(() => {\n    if (accounts.length > 0) {\n      // Ensure accounts have been updated\n      navigate('/accounts');\n    }\n  }, [accounts, navigate]);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //   fetch(`/api/transactions`,{\n  //     method: 'GET',\n  //     credentials: 'include'\n  //   })\n  //   .then((r) => r.json())\n  //   .then(transactions => {\n  //     setTransactions(transactions);\n  // }).catch(error => {\n  //   console.log(\"Error in fetching banks\", error)\n  //   setLoading(false);\n\n  // });\n  // }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/check_session`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Session response:\", data);\n\n      // Check if data contains a valid user_id or similar flag\n      if (data.id) {\n        setUser(data);\n        setAccounts(data.accounts);\n        setTransactions(data.transactions);\n      } else {\n        setUser(null);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching session:\", error);\n      setUser(null);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed(id) {\n    fetch(`/api/transactionseed`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    }).then(response => response.json()).then(document.location.reload()).catch(error => console.error('Error:', error));\n  }\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      transactions,\n      banks,\n      accounts,\n      categories,\n      user,\n      setUser,\n      setLoading,\n      setCategories,\n      handleLogin,\n      errors,\n      errorState,\n      handleTransactionSeed,\n      handleNewAccountSubmission,\n      mockLogin,\n      API_URL\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"ivMJEty+fa/IiMIVBfFTW1QOkzM=\", true);\n_c = AppProvider;\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AppContext","API_URL","process","env","REACT_APP_API_URL","AppProvider","children","_s","user","setUser","undefined","categories","setCategories","loading","setLoading","errors","setErrors","errorState","setErrorState","banks","setBanks","accounts","setAccounts","transactions","setTransactions","navigate","useNavigate","handleLogin","username","password","setSubmitting","fetch","method","credentials","headers","body","JSON","stringify","then","r","console","log","ok","json","err","message","catch","finally","mockLogin","error","handleNewAccountSubmission","bank_name","account_value","account_type","data","length","response","Error","id","handleTransactionSeed","document","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect  } from 'react';\n\n\nconst AppContext = createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [errorState, setErrorState] = useState(false)\n  const [banks, setBanks] = useState([])\n  const [accounts, setAccounts] = useState([])\n  const [transactions, setTransactions] = useState([])\n  const navigate = useNavigate() \n\n  function handleLogin(username, password, setSubmitting, navigate) {\n    \n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        console.log(r)\n        if (r.ok) {\n          r.json().then((user) => {\n            console.log(\"User\", user)\n            setUser(user)\n            setAccounts(user.accounts)\n            setTransactions(user.transactions)\n            navigate('/');\n          })\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      .finally(()=>{\n        setSubmitting(false)\n      })\n      \n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((user) => {\n            setUser(user);\n            console.log(\"User\", user)\n            setUser(user)\n            setAccounts(user.accounts)\n            setTransactions(user.transactions)\n            navigate('/')\n          });\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      \n  }\n\n  // useEffect(() => {\n  //   if (!user) return;\n  \n  //   // Optionally, create an AbortController if you want to cancel these fetches on unmount.\n  //   const controller = new AbortController();\n  //   const signal = controller.signal;\n  \n  //   // Create an array of endpoint configs\n  //   const endpoints = [\n  //     { url: '/api/insights', setter: setCategories, errorMsg: 'Error fetching insights' },\n  //     { url: '/api/accounts', setter: setAccounts, errorMsg: 'Error fetching accounts' },\n  //     { url: '/api/transactions', setter: setTransactions, errorMsg: 'Error fetching transactions' }\n  //   ];\n  \n  //   Promise.all(\n  //     endpoints.map(({ url }) =>\n  //       fetch(url, { method: 'GET', credentials: 'include', signal }).then(r => {\n  //         if (!r.ok) throw new Error(`Network error for ${url}`);\n  //         return r.json();\n  //       })\n  //     )\n  //   )\n  //     .then(([insightsData, accountsData, transactionsData]) => {\n  //       setCategories(insightsData);\n  //       setAccounts(accountsData);\n  //       setTransactions(transactionsData);\n  //     })\n  //     .catch(error => {\n  //       // If error is an AbortError, we can ignore it.\n  //       if (error.name !== 'AbortError') {\n  //         console.error(\"Error fetching data:\", error);\n  //         setLoading(false);\n  //       }\n  //     });\n  \n  //   // Cleanup function to abort fetches on unmount.\n  //   return () => controller.abort();\n  // }, [user]);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //     fetch(`/api/insights`,{\n  //       method: 'GET',\n  //       credentials: 'include'\n  //     })\n  //     .then((r) => r.json())\n  //     .then(insightsData => {\n  //     setCategories(insightsData);\n  //   }).catch(error => {\n  //     console.log(\"Error fetching insights\", error)\n  //     setLoading(false);\n      \n  //   });\n  // }, [user]);\n\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //   fetch(`/api/accounts`,{\n  //     method: 'GET',\n  //     credentials: 'include'\n  //   })\n  //   .then((r) => r.json())\n  //   .then(accounts => {\n  //     setAccounts(accounts);\n  // }).catch(error => {\n  //   console.log(\"Error in fetching banks\", error)\n  //   setLoading(false);\n    \n  // });\n  // }, [user]);\n  \n  useEffect(() => {\n    if (!user) return;\n    fetch(`/api/banks`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n    .then((r) => r.json())\n    .then(banks => {\n      setBanks(banks);\n  }).catch(error => {\n    console.log(\"Error in fetching banks\", error)\n    setLoading(false);\n    \n  });\n}, []);\n\nfunction handleNewAccountSubmission(bank_name,\n  account_value,\n  account_type,\n  setSubmitting,\n  navigate) {\n  fetch(`/api/accounts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    credentials: 'include',\n    body: JSON.stringify({bank_name, account_value, account_type}),\n  })\n  .then((r) => r.json())\n  .then(data=>{\n\n    if (data) {\n      setAccounts(...accounts, data)\n    }\n    else {\n      console.log(\"Something went wrong\")\n      setSubmitting(false)\n      setErrorState(true)\n      \n    }\n    \n  }\n  \n  )\n\n  }\n  useEffect(() => {\n    if (accounts.length > 0) { // Ensure accounts have been updated\n      navigate('/accounts');\n    }\n  }, [accounts, navigate]);\n\n// useEffect(() => {\n//   if (!user) return;\n//   fetch(`/api/transactions`,{\n//     method: 'GET',\n//     credentials: 'include'\n//   })\n//   .then((r) => r.json())\n//   .then(transactions => {\n//     setTransactions(transactions);\n// }).catch(error => {\n//   console.log(\"Error in fetching banks\", error)\n//   setLoading(false);\n  \n// });\n// }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/check_session`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log(\"Session response:\", data);\n        \n        // Check if data contains a valid user_id or similar flag\n        if (data.id) {\n          setUser(data);\n          setAccounts(data.accounts)\n          setTransactions(data.transactions)\n        } else {\n          setUser(null);\n        }\n      })\n      .catch(error => {\n        console.error(\"Error fetching session:\", error);\n        setUser(null);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed(id) {\n    fetch(`/api/transactionseed`, {\n        method: 'POST', \n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json',  \n        },\n        body: JSON.stringify({ id }),\n    })\n    .then(response => response.json())\n    .then(document.location.reload())\n    .catch(error => console.error('Error:', error)); \n}\n  \n      \n\n  return (\n    <AppContext.Provider value={{loading,\n     transactions,\n     banks,\n     accounts,\n     categories,\n     user,\n     setUser,\n     setLoading,\n     setCategories,\n     handleLogin,\n     errors,\n     errorState,\n     handleTransactionSeed,\n     handleNewAccountSubmission,\n     mockLogin, \n     API_URL }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}