{"ast":null,"code":"import React,{useState,useContext}from'react';import{Formik,Form,Field}from'formik';import AppContext from'../AppContext';import*as yup from'yup';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AddNewAccountForm(_ref){let{handleNewAccountSubmission}=_ref;const[holdSuggest,setHoldSuggest]=useState('');const{banks}=useContext(AppContext);const bank_names=banks.filter(bank=>{return bank.name.toLowerCase().includes(holdSuggest.toLowerCase());});const FormSchema=yup.object().shape({account_value:yup.number().min(1,'Account value must be at least 1 characters long'),bank_name:yup.string().min(5,'bank must be 5 characters long').matches(/[a-z]/,'username requires a lowercase letter').matches(/[A-Z]/,'username requires an uppercase letter'),account_type:yup.string().matches(/^(Checking|Savings)$/,\"Account type should be 'Checking' or 'Savings'\")});return/*#__PURE__*/_jsx(Formik,{initialValues:{bank_name:'',account_value:0,account_type:''},validationSchema:FormSchema,onSubmit:(values,_ref2)=>{let{setSubmitting}=_ref2;handleNewAccountSubmission(values.bank_name,values.account_value,values.account_type,setSubmitting);},children:_ref3=>{let{isSubmitting,errors,handleChange}=_ref3;return/*#__PURE__*/_jsxs(Form,{className:\"login_form_body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form_fields\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form_row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"formik_labels\",children:\"Bank Name: \"}),/*#__PURE__*/_jsx(Field,{as:\"input\",type:\"text\",name:\"bank_name\",className:\"formik_fields\",list:\"bankList\",onChange:e=>{handleChange(e);setHoldSuggest(e.target.value);}}),/*#__PURE__*/_jsx(\"datalist\",{id:\"bankList\",children:bank_names.map((bank,key)=>/*#__PURE__*/_jsx(\"option\",{value:bank.name},key))}),errors.bank_name&&/*#__PURE__*/_jsx(\"p\",{children:errors.bank_name})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form_row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"formik_labels\",children:\"Account Value: \"}),/*#__PURE__*/_jsx(Field,{type:\"text\",name:\"account_value\",className:\"formik_fields\"}),errors.account_value&&/*#__PURE__*/_jsx(\"p\",{children:errors.account_value})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form_row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"formik_labels\",children:\"Account Type: \"}),/*#__PURE__*/_jsx(Field,{type:\"text\",name:\"account_type\",className:\"formik_fields\"}),errors.account_type&&/*#__PURE__*/_jsx(\"p\",{children:errors.account_type})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form_row\",style:{justifyContent:\"center\"},children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:isSubmitting,id:\"login_button\",children:\"Submit\"})})]});}});}export default AddNewAccountForm;","map":{"version":3,"names":["React","useState","useContext","Formik","Form","Field","AppContext","yup","jsx","_jsx","jsxs","_jsxs","AddNewAccountForm","_ref","handleNewAccountSubmission","holdSuggest","setHoldSuggest","banks","bank_names","filter","bank","name","toLowerCase","includes","FormSchema","object","shape","account_value","number","min","bank_name","string","matches","account_type","initialValues","validationSchema","onSubmit","values","_ref2","setSubmitting","children","_ref3","isSubmitting","errors","handleChange","className","as","type","list","onChange","e","target","value","id","map","key","style","justifyContent","disabled"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/Components/AddNewAccountForm.js"],"sourcesContent":["import React, { useState, useContext} from 'react'\nimport { Formik, Form, Field} from 'formik';\nimport AppContext from '../AppContext';\n\nimport * as yup from 'yup';\n\n\n\nfunction AddNewAccountForm({handleNewAccountSubmission}) {\n    const [holdSuggest, setHoldSuggest] = useState('')\n    const { banks } = useContext(AppContext)\n    \n    const bank_names = banks.filter(bank=>{\n        return bank.name.toLowerCase().includes(holdSuggest.toLowerCase())\n    })\n\n    const FormSchema = yup.object().shape({\n        account_value: yup\n            .number()\n            .min(1, 'Account value must be at least 1 characters long'),\n        bank_name: yup\n            .string()\n            .min(5, 'bank must be 5 characters long')\n            .matches(/[a-z]/, 'username requires a lowercase letter')\n            .matches(/[A-Z]/, 'username requires an uppercase letter'),\n        account_type: yup\n            .string()\n            .matches(/^(Checking|Savings)$/, \"Account type should be 'Checking' or 'Savings'\")\n\n        });\n\n  return (\n    <Formik\n    initialValues={{ bank_name: '', account_value: 0, account_type: '' }}\n    validationSchema={FormSchema}\n    onSubmit={(values, { setSubmitting }) => {\n        handleNewAccountSubmission(values.bank_name, values.account_value, values.account_type, setSubmitting);\n    }}\n>\n    {({ isSubmitting, errors, handleChange }) => (\n      \n    <Form className='login_form_body'>\n        \n        {/* <div className='form_row'> */}\n        <div className='form_fields'>\n            <div className='form_row'>\n                <label className=\"formik_labels\">Bank Name: </label>\n                <Field\n                as=\"input\"\n                type=\"text\" \n                name=\"bank_name\" \n                className=\"formik_fields\" \n                list=\"bankList\"\n                onChange={(e)=>{\n                  handleChange(e)\n                  setHoldSuggest(e.target.value)}}\n                  />\n                \n                <datalist id=\"bankList\">\n                {bank_names.map((bank, key) =>\n                  <option key={key} value={bank.name} />\n                )}\n                </datalist>\n                {errors.bank_name && <p>{errors.bank_name}</p>}\n            </div>\n            <div className='form_row'>\n                <label className=\"formik_labels\">Account Value: </label>\n                <Field type=\"text\" name=\"account_value\" className=\"formik_fields\"/>\n                {errors.account_value && <p>{errors.account_value}</p>}\n            </div>\n            <div className='form_row'>\n                <label className=\"formik_labels\">Account Type: </label>\n                <Field type=\"text\" name=\"account_type\" className=\"formik_fields\"/>\n                {errors.account_type && <p>{errors.account_type}</p>}\n            </div>\n          </div>\n        \n        \n        <div className='form_row' style={{justifyContent:\"center\"}}>\n        <button type=\"submit\" disabled={isSubmitting} id='login_button'>\n        Submit\n        </button>\n      \n        </div>\n    </Form>\n    )}\n</Formik>\n  )\n}\n\nexport default AddNewAccountForm"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}