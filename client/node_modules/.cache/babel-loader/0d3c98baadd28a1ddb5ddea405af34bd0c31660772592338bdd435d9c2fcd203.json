{"ast":null,"code":"import React,{useState,useContext,useEffect}from'react';import{Formik,Form,Field}from'formik';import AppContext from'../AppContext';import{useNavigate}from'react-router-dom';import*as yup from'yup';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AddNewAccountForm(){const API_URL=process.env.REACT_APP_API_URL;const[holdSuggest,setHoldSuggest]=useState('');const{handleNewAccountSubmission,errors,errorState,setLoading}=useContext(AppContext);const navigate=useNavigate();const[banks,setBanks]=useState([]);useEffect(()=>{fetch(\"\".concat(API_URL,\"/api/banks\"),{method:'GET',credentials:'include'}).then(r=>r.json()).then(banks=>{setBanks(banks);}).catch(error=>{console.log(\"Error in fetching banks\",error);setLoading(false);});},[]);const bank_names=banks.filter(bank=>{return bank.name.toLowerCase().includes(holdSuggest.toLowerCase());});const FormSchema=yup.object().shape({account_value:yup.number().min(1,'Account value must be at least 1 characters long'),bank_name:yup.string().min(5,'bank must be 5 characters long').matches(/[a-z]/,'username requires a lowercase letter').matches(/[A-Z]/,'username requires an uppercase letter'),account_type:yup.string().matches(/^(Checking|Savings)$/,\"Account type should be 'Checking' or 'Savings'\"),cardNumber:yup.string().matches(/^\\d+$/,'Must contain only digits').length(9,'Must be at least 9 characters long')});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Formik,{initialValues:{bank_name:'',account_value:'',account_type:'Checking',cardNumber:0},validationSchema:FormSchema,onSubmit:(values,_ref)=>{let{setSubmitting}=_ref;handleNewAccountSubmission(values.bank_name,values.account_value,values.account_type,parseInt(values.cardNumber),setSubmitting,navigate);},children:_ref2=>{let{isSubmitting,errors,handleChange}=_ref2;return/*#__PURE__*/_jsxs(Form,{className:\"login_form_body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form_fields\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form_row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"formik_labels\",id:\"accountAdd\",children:\"Bank Name: \"}),/*#__PURE__*/_jsx(Field,{as:\"input\",type:\"text\",name:\"bank_name\",className:\"formik_fields\",list:\"bankList\",onChange:e=>{handleChange(e);setHoldSuggest(e.target.value);}}),/*#__PURE__*/_jsx(\"datalist\",{id:\"bankList\",children:bank_names.map((bank,key)=>/*#__PURE__*/_jsx(\"option\",{value:bank.name},key))}),errors.bank_name&&/*#__PURE__*/_jsx(\"p\",{children:errors.bank_name})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form_row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"formik_labels\",id:\"accountAdd\",children:\"Account Value: \"}),/*#__PURE__*/_jsx(Field,{type:\"text\",name:\"account_value\",className:\"formik_fields\"}),errors.account_value&&/*#__PURE__*/_jsx(\"p\",{children:errors.account_value})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form_row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"formik_labels\",id:\"accountAdd\",children:\"Account Type: \"}),/*#__PURE__*/_jsxs(Field,{as:\"select\",name:\"account_type\",className:\"formik_fields\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"Checking\",children:\"Checking\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Savings\",children:\"Savings\"})]}),errors.account_type&&/*#__PURE__*/_jsx(\"p\",{children:errors.account_type})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form_row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"formik_labels\",id:\"accountAdd\",children:\"Card Number\"}),/*#__PURE__*/_jsx(Field,{type:\"text\",name:\"cardNumber\",className:\"formik_fields\"}),errors.cardNumber&&/*#__PURE__*/_jsx(\"p\",{children:errors.cardNumber})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form_row\",style:{justifyContent:\"center\"},children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:isSubmitting,id:\"login_button\",children:\"Submit\"})})]});}}),errorState?errors:null]});}export default AddNewAccountForm;","map":{"version":3,"names":["React","useState","useContext","useEffect","Formik","Form","Field","AppContext","useNavigate","yup","jsx","_jsx","jsxs","_jsxs","AddNewAccountForm","API_URL","process","env","REACT_APP_API_URL","holdSuggest","setHoldSuggest","handleNewAccountSubmission","errors","errorState","setLoading","navigate","banks","setBanks","fetch","concat","method","credentials","then","r","json","catch","error","console","log","bank_names","filter","bank","name","toLowerCase","includes","FormSchema","object","shape","account_value","number","min","bank_name","string","matches","account_type","cardNumber","length","children","initialValues","validationSchema","onSubmit","values","_ref","setSubmitting","parseInt","_ref2","isSubmitting","handleChange","className","id","as","type","list","onChange","e","target","value","map","key","style","justifyContent","disabled"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/Components/AddNewAccountForm.js"],"sourcesContent":["import React, { useState, useContext, useEffect} from 'react'\nimport { Formik, Form, Field} from 'formik';\nimport AppContext from '../AppContext';\nimport { useNavigate } from 'react-router-dom';\n\nimport * as yup from 'yup';\n\n\n\nfunction AddNewAccountForm() {\n    \n    const API_URL = process.env.REACT_APP_API_URL;\n    const [holdSuggest, setHoldSuggest] = useState('')\n    const {handleNewAccountSubmission, errors, errorState, setLoading} = useContext(AppContext)\n    const navigate = useNavigate()\n    const [banks, setBanks] = useState([])\n\n    \n    \n    useEffect(() => {\n        fetch(`${API_URL}/api/banks`,{\n          method: 'GET',\n          credentials: 'include'\n        })\n        .then((r) => r.json())\n        .then(banks => {\n          setBanks(banks);\n      }).catch(error => {\n        console.log(\"Error in fetching banks\", error)\n        setLoading(false);\n        \n      });\n    }, []);\n    const bank_names = banks.filter(bank=>{\n        return bank.name.toLowerCase().includes(holdSuggest.toLowerCase())\n    })\n    \n    const FormSchema = yup.object().shape({\n        account_value: yup\n            .number().min(1, 'Account value must be at least 1 characters long'),\n        bank_name: yup\n            .string()\n            .min(5, 'bank must be 5 characters long')\n            .matches(/[a-z]/, 'username requires a lowercase letter')\n            .matches(/[A-Z]/, 'username requires an uppercase letter'),\n        account_type: yup\n            .string()\n            .matches(/^(Checking|Savings)$/, \"Account type should be 'Checking' or 'Savings'\"),\n        cardNumber: yup.string()\n            .matches(/^\\d+$/, 'Must contain only digits')\n            .length(9, 'Must be at least 9 characters long')\n\n        });\n\n  return (\n    <div>\n    <Formik\n    initialValues={{ bank_name: '', account_value: '', account_type: 'Checking', cardNumber: 0 }}\n    validationSchema={FormSchema}\n    onSubmit={(values, { setSubmitting }) => {\n        handleNewAccountSubmission(values.bank_name, values.account_value, values.account_type, parseInt(values.cardNumber), setSubmitting, navigate)\n        \n    }}\n>   \n    {({ isSubmitting, errors, handleChange }) => (\n      \n    <Form className='login_form_body'>\n        \n        {/* <div className='form_row'> */}\n        <div className='form_fields'>\n            <div className='form_row'>\n                <label className=\"formik_labels\" id = \"accountAdd\">Bank Name: </label>\n                <Field\n                as=\"input\"\n                type=\"text\" \n                name=\"bank_name\" \n                className=\"formik_fields\" \n                list=\"bankList\"\n                onChange={(e)=>{\n                  handleChange(e)\n                  setHoldSuggest(e.target.value)}}\n                  />\n                \n                <datalist id=\"bankList\">\n                {bank_names.map((bank, key) =>\n\n                  <option key={key} value={bank.name} />\n                )}\n                </datalist>\n                {errors.bank_name && <p>{errors.bank_name}</p>}\n            </div>\n            <div className='form_row'>\n                <label className=\"formik_labels\" id = \"accountAdd\">Account Value: </label>\n                <Field type=\"text\" name=\"account_value\" className=\"formik_fields\"/>\n                {errors.account_value && <p>{errors.account_value}</p>}\n            </div>\n            <div className='form_row'>\n                <label className=\"formik_labels\" id = \"accountAdd\">Account Type: </label>\n                <Field as=\"select\"  name=\"account_type\" className=\"formik_fields\">\n                    <option value=\"Checking\">Checking</option>\n                    <option value=\"Savings\">Savings</option>\n                </Field>\n                {errors.account_type && <p>{errors.account_type}</p>}\n            </div>\n            <div className='form_row'>\n                <label className=\"formik_labels\" id = \"accountAdd\">Card Number</label>\n                <Field type =\"text\" name=\"cardNumber\" className=\"formik_fields\"/>\n                {errors.cardNumber && <p>{errors.cardNumber}</p>}\n            </div>\n          </div>\n        \n        \n        <div className='form_row' style={{justifyContent:\"center\"}}>\n        <button type=\"submit\" disabled={isSubmitting} id='login_button'>\n        Submit\n        </button>\n        \n        </div>\n    </Form>\n    \n    )}\n    \n</Formik>\n    {errorState?errors:null}\n</div>\n  )\n}\n\nexport default AddNewAccountForm"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}