{"ast":null,"code":"var _jsxFileName = \"/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [banks, setBanks] = useState([]);\n  useEffect(() => {\n    fetch(`/api/insights`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(r => r.json()).then(insightsData => {\n      setCategories(insightsData);\n    }).catch(error => {\n      console.log(\"Error fetching insights\", error);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    fetch(`/api/banks`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(r => r.json()).then(banks => {\n      setBanks(banks);\n    }).catch(error => {\n      console.log(\"Error in fetching banks\", error);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    setLoading(true);\n    fetch(`api/check_session`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Session response:\", data);\n      // Check if data contains a valid user_id or similar flag\n      if (data.user_id) {\n        setUser(data);\n      } else {\n        setUser(null);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching session:\", error);\n      setUser(null);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n  function handleLogin(username, password, setSubmitting, navigate) {\n    fetch(`api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(user => {\n          setUser(user);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    console.log(\"Nav test\", navigate);\n    fetch(`api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(user => {\n          setUser(user);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    });\n  }\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed() {\n    fetch(`api/transactionseed`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(document.location.reload()).catch(error => console.error('Error:', error));\n  }\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      banks,\n      categories,\n      user,\n      setUser,\n      setLoading,\n      setCategories,\n      handleLogin,\n      errors,\n      handleTransactionSeed,\n      mockLogin,\n      API_URL\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"A5/zpsKS1+k/S3QP/nWjpEM2sjQ=\");\n_c = AppProvider;\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AppContext","API_URL","process","env","REACT_APP_API_URL","AppProvider","children","_s","user","setUser","undefined","categories","setCategories","loading","setLoading","errors","setErrors","banks","setBanks","fetch","method","credentials","then","r","json","insightsData","catch","error","console","log","response","ok","Error","data","user_id","finally","handleLogin","username","password","setSubmitting","navigate","headers","body","JSON","stringify","err","message","mockLogin","handleTransactionSeed","document","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect  } from 'react';\n\n\nconst AppContext = createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [banks, setBanks] = useState([])\n\n  useEffect(() => {\n      \n      fetch(`/api/insights`,{\n        method: 'GET',\n        credentials: 'include'\n      })\n      .then((r) => r.json())\n      .then(insightsData => {\n      setCategories(insightsData);\n    }).catch(error => {\n      console.log(\"Error fetching insights\", error)\n      setLoading(false);\n      \n    });\n  }, []);\n  \n  useEffect(() => {\n    fetch(`/api/banks`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n    .then((r) => r.json())\n    .then(banks => {\n      setBanks(banks);\n  }).catch(error => {\n    console.log(\"Error in fetching banks\", error)\n    setLoading(false);\n    \n  });\n}, []);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`api/check_session`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log(\"Session response:\", data);\n        // Check if data contains a valid user_id or similar flag\n        if (data.user_id) {\n          setUser(data);\n        } else {\n          setUser(null);\n        }\n      })\n      .catch(error => {\n        console.error(\"Error fetching session:\", error);\n        setUser(null);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  function handleLogin(username, password, setSubmitting, navigate) {\n    \n    fetch(`api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((user) => {\n            setUser(user);\n            navigate('/');\n          })\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      .finally(()=>{\n        setSubmitting(false)\n      })\n      \n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    console.log(\"Nav test\", navigate)\n    fetch(`api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((user) => {\n            setUser(user);\n            navigate('/')\n          });\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      \n  }\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed() {\n    fetch(`api/transactionseed`, {\n        method: 'POST', \n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json',  \n        },\n    })\n    .then(response => response.json())\n    .then(document.location.reload())\n    .catch(error => console.error('Error:', error)); \n}\n  \n      \n\n  return (\n    <AppContext.Provider value={{loading,\n     banks,\n     categories,\n     user,\n     setUser,\n     setLoading,\n     setCategories,\n     handleLogin,\n     errors,\n     handleTransactionSeed,\n     mockLogin, API_URL }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}