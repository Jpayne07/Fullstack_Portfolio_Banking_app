{"ast":null,"code":"var _jsxFileName = \"/home/jacob/development/code/phase-5/p5-project/client/src/Components/EditableText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditableText({\n  initialText,\n  transactionId\n}) {\n  _s();\n  const [isEditing, setIsEditing] = useState(false); // Track if editing mode is active\n  const [text, setText] = useState(initialText); // Store the text value\n\n  const handleTextClick = () => {\n    setIsEditing(true); // Switch to editing mode\n  };\n  const handleInputChange = e => {\n    setText(e.target.value); // Update the text state as the user types\n  };\n  const handleInputBlur = async () => {\n    setIsEditing(false); // Exit editing mode when the input loses focus\n    await saveTextToDatabase();\n  };\n  const handleKeyPress = async e => {\n    if (e.key === \"Enter\") {\n      setIsEditing(false); // Exit editing mode when Enter is pressed\n      await saveTextToDatabase();\n    }\n  };\n  const saveTextToDatabase = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/api/transaction/${transactionId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save changes. Please try again.\");\n      }\n      const data = await response.json();\n      console.log(\"Changes saved:\", data);\n    } catch (err) {\n      console.error(err);\n      setError(\"Failed to save changes.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: text,\n      onChange: handleInputChange,\n      onBlur: handleInputBlur,\n      onKeyPress: handleKeyPress,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: handleTextClick,\n      style: {\n        cursor: \"pointer\"\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(EditableText, \"VO7DSw6Y+S1O7ORLGVxqICQ7bbw=\");\n_c = EditableText;\nexport default EditableText;\nvar _c;\n$RefreshReg$(_c, \"EditableText\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditableText","initialText","transactionId","_s","isEditing","setIsEditing","text","setText","handleTextClick","handleInputChange","e","target","value","handleInputBlur","saveTextToDatabase","handleKeyPress","key","setLoading","setError","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","err","error","children","type","onChange","onBlur","onKeyPress","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","_c","$RefreshReg$"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/Components/EditableText.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction EditableText({ initialText, transactionId  }) {\n  const [isEditing, setIsEditing] = useState(false); // Track if editing mode is active\n  const [text, setText] = useState(initialText); // Store the text value\n\n  const handleTextClick = () => {\n    setIsEditing(true); // Switch to editing mode\n  };\n\n  const handleInputChange = (e) => {\n    setText(e.target.value); // Update the text state as the user types\n  };\n\n  const handleInputBlur = async () => {\n    setIsEditing(false); // Exit editing mode when the input loses focus\n    await saveTextToDatabase();\n  };\n\n  const handleKeyPress = async (e) => {\n    if (e.key === \"Enter\") {\n      setIsEditing(false); // Exit editing mode when Enter is pressed\n      await saveTextToDatabase();\n    }\n  };\n\n  const saveTextToDatabase = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/transaction/${transactionId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ text }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save changes. Please try again.\");\n      }\n\n      const data = await response.json();\n      console.log(\"Changes saved:\", data);\n    } catch (err) {\n      console.error(err);\n      setError(\"Failed to save changes.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      {isEditing ? (\n        <input\n          type=\"text\"\n          value={text}\n          onChange={handleInputChange}\n          onBlur={handleInputBlur}\n          onKeyPress={handleKeyPress}\n          autoFocus\n        />\n      ) : (\n        <span onClick={handleTextClick} style={{ cursor: \"pointer\" }}>\n          {text}\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default EditableText;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,YAAYA,CAAC;EAAEC,WAAW;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACrD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnD,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACI,WAAW,CAAC,CAAC,CAAC;;EAE/C,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC5BH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,MAAMI,iBAAiB,GAAIC,CAAC,IAAK;IAC/BH,OAAO,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClCR,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,MAAMS,kBAAkB,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,cAAc,GAAG,MAAOL,CAAC,IAAK;IAClC,IAAIA,CAAC,CAACM,GAAG,KAAK,OAAO,EAAE;MACrBX,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB,MAAMS,kBAAkB,CAAC,CAAC;IAC5B;EACF,CAAC;EAED,MAAMA,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrCG,UAAU,CAAC,IAAI,CAAC;IAChBC,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoBlB,aAAa,EAAE,EAAE;QAChEmB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEnB;QAAK,CAAC;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACa,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;MAC9D;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;MAClBd,QAAQ,CAAC,yBAAyB,CAAC;IACrC,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACElB,OAAA;IAAAmC,QAAA,EACG9B,SAAS,gBACRL,OAAA;MACEoC,IAAI,EAAC,MAAM;MACXvB,KAAK,EAAEN,IAAK;MACZ8B,QAAQ,EAAE3B,iBAAkB;MAC5B4B,MAAM,EAAExB,eAAgB;MACxByB,UAAU,EAAEvB,cAAe;MAC3BwB,SAAS;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,gBAEF5C,OAAA;MAAM6C,OAAO,EAAEpC,eAAgB;MAACqC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAU,CAAE;MAAAZ,QAAA,EAC1D5B;IAAI;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EACP;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACxC,EAAA,CArEQH,YAAY;AAAA+C,EAAA,GAAZ/C,YAAY;AAuErB,eAAeA,YAAY;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}