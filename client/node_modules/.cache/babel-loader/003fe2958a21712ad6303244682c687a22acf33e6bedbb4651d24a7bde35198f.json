{"ast":null,"code":"var _jsxFileName = \"/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    setLoading(true);\n    fetch('/api/insights').then(r => r.json()).then(insightsData => {\n      setCategories(insightsData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n    });\n  }, [user]);\n  useEffect(() => {\n    fetch(\"/api/check_session\").then(response => {\n      if (response.ok) {\n        response.json().then(user => setUser(user));\n      }\n    });\n  }, []);\n  function handleSubmit(username, password, setSubmitting) {\n    fetch(\"/api/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(user => {\n          setUser(user);\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    }).finally(() => {\n      setSubmitting(false); // Ensure submission is completed\n    });\n  }\n  useEffect(() => {\n    if (user) {\n      navigate('/'); // Navigate after user state updates\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      categories,\n      user,\n      setUser,\n      setLoading,\n      setCategories,\n      handleSubmit,\n      errors,\n      setErrors\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"XdH1pizbi4reP/rKtP67jBiMlNA=\", false, function () {\n  return [useNavigate];\n});\n_c = AppProvider;\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","user","setUser","undefined","categories","setCategories","loading","setLoading","errors","setErrors","navigate","fetch","then","r","json","insightsData","catch","error","console","response","ok","handleSubmit","username","password","setSubmitting","method","headers","body","JSON","stringify","err","message","finally","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n    const [errors, setErrors] = useState([]);\n  \n  \n  const navigate = useNavigate()\n\n\n\n\n  \n  useEffect(() => {\n    setLoading(true);\n      fetch('/api/insights')\n      .then((r) => r.json())\n      .then(insightsData => {\n      setCategories(insightsData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n    });\n  }, [user]);\n\n      useEffect(() => {\n        fetch(\"/api/check_session\").then((response) => {\n          if (response.ok) {\n            response.json()\n            .then((user) => setUser(user))\n          }\n        });\n      }, []);\n\n  function handleSubmit(username, password, setSubmitting) {\n          fetch(\"/api/login\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ username, password }),\n          })\n            .then((r) => {\n              if (r.ok) {\n                r.json().then((user) => {\n                  setUser(user);\n                });\n              } else {\n                r.json().then((err) => {\n                  setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n                });\n              }\n            })\n            .catch((err) => {\n              setErrors([err.message || \"Network error. Please try again later.\"]);\n            })\n            .finally(() => {\n              setSubmitting(false);  // Ensure submission is completed\n            });\n        }\n        useEffect(() => {\n          if (user) {\n              navigate('/'); // Navigate after user state updates\n          }\n      }, [user]);\n      \n\n\n\n  return (\n    <AppContext.Provider value={{loading, categories, user, setUser, setLoading, setCategories, handleSubmit, errors, setErrors }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}