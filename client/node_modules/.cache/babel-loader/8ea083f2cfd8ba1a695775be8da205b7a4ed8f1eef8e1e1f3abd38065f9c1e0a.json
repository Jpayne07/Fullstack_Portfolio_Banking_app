{"ast":null,"code":"var _jsxFileName = \"/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [banks, setBanks] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  function handleLogin(username, password, setSubmitting, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(user => {\n          setUser(user);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(user => {\n          setUser(user);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    });\n  }\n  useEffect(() => {\n    if (!user) return;\n\n    // Optionally, create an AbortController if you want to cancel these fetches on unmount.\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    // Create an array of endpoint configs\n    const endpoints = [{\n      url: '/api/insights',\n      setter: setCategories,\n      errorMsg: 'Error fetching insights'\n    }, {\n      url: '/api/accounts',\n      setter: setAccounts,\n      errorMsg: 'Error fetching accounts'\n    }, {\n      url: '/api/transactions',\n      setter: setTransactions,\n      errorMsg: 'Error fetching transactions'\n    }];\n    Promise.all(endpoints.map(({\n      url\n    }) => fetch(url, {\n      method: 'GET',\n      credentials: 'include',\n      signal\n    }).then(r => {\n      if (!r.ok) throw new Error(`Network error for ${url}`);\n      return r.json();\n    }))).then(([insightsData, accountsData, transactionsData]) => {\n      setCategories(insightsData);\n      setAccounts(accountsData);\n      setTransactions(transactionsData);\n    }).catch(error => {\n      // If error is an AbortError, we can ignore it.\n      if (error.name !== 'AbortError') {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    });\n\n    // Cleanup function to abort fetches on unmount.\n    return () => controller.abort();\n  }, [user]);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //     fetch(`/api/insights`,{\n  //       method: 'GET',\n  //       credentials: 'include'\n  //     })\n  //     .then((r) => r.json())\n  //     .then(insightsData => {\n  //     setCategories(insightsData);\n  //   }).catch(error => {\n  //     console.log(\"Error fetching insights\", error)\n  //     setLoading(false);\n\n  //   });\n  // }, [user]);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //   fetch(`/api/accounts`,{\n  //     method: 'GET',\n  //     credentials: 'include'\n  //   })\n  //   .then((r) => r.json())\n  //   .then(accounts => {\n  //     setAccounts(accounts);\n  // }).catch(error => {\n  //   console.log(\"Error in fetching banks\", error)\n  //   setLoading(false);\n\n  // });\n  // }, [user]);\n\n  useEffect(() => {\n    if (!user) return;\n    fetch(`/api/banks`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(r => r.json()).then(banks => {\n      setBanks(banks);\n    }).catch(error => {\n      console.log(\"Error in fetching banks\", error);\n      setLoading(false);\n    });\n  }, []);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //   fetch(`/api/transactions`,{\n  //     method: 'GET',\n  //     credentials: 'include'\n  //   })\n  //   .then((r) => r.json())\n  //   .then(transactions => {\n  //     setTransactions(transactions);\n  // }).catch(error => {\n  //   console.log(\"Error in fetching banks\", error)\n  //   setLoading(false);\n\n  // });\n  // }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/check_session`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Session response:\", data);\n\n      // Check if data contains a valid user_id or similar flag\n      if (data.id) {\n        setUser(data);\n        console.log(data);\n      } else {\n        setUser(null);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching session:\", error);\n      setUser(null);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed(id) {\n    fetch(`/api/transactionseed`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    }).then(response => response.json()).then(document.location.reload()).catch(error => console.error('Error:', error));\n  }\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      transactions,\n      banks,\n      accounts,\n      categories,\n      user,\n      setUser,\n      setLoading,\n      setCategories,\n      handleLogin,\n      errors,\n      handleTransactionSeed,\n      mockLogin,\n      API_URL\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"toplxg8ySkhhbNy1+djbdJ8J5JQ=\");\n_c = AppProvider;\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AppContext","API_URL","process","env","REACT_APP_API_URL","AppProvider","children","_s","user","setUser","undefined","categories","setCategories","loading","setLoading","errors","setErrors","banks","setBanks","accounts","setAccounts","transactions","setTransactions","handleLogin","username","password","setSubmitting","navigate","fetch","method","credentials","headers","body","JSON","stringify","then","r","ok","json","err","message","catch","finally","mockLogin","controller","AbortController","signal","endpoints","url","setter","errorMsg","Promise","all","map","Error","insightsData","accountsData","transactionsData","error","name","console","abort","log","response","data","id","handleTransactionSeed","document","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect  } from 'react';\n\n\nconst AppContext = createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState(undefined);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [banks, setBanks] = useState([])\n  const [accounts, setAccounts] = useState([])\n  const [transactions, setTransactions] = useState([])\n\n  function handleLogin(username, password, setSubmitting, navigate) {\n    \n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((user) => {\n            setUser(user);\n            navigate('/');\n          })\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      .finally(()=>{\n        setSubmitting(false)\n      })\n      \n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((user) => {\n            setUser(user);\n            navigate('/')\n          });\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      \n  }\n  useEffect(() => {\n    if (!user) return;\n  \n    // Optionally, create an AbortController if you want to cancel these fetches on unmount.\n    const controller = new AbortController();\n    const signal = controller.signal;\n  \n    // Create an array of endpoint configs\n    const endpoints = [\n      { url: '/api/insights', setter: setCategories, errorMsg: 'Error fetching insights' },\n      { url: '/api/accounts', setter: setAccounts, errorMsg: 'Error fetching accounts' },\n      { url: '/api/transactions', setter: setTransactions, errorMsg: 'Error fetching transactions' }\n    ];\n  \n    Promise.all(\n      endpoints.map(({ url }) =>\n        fetch(url, { method: 'GET', credentials: 'include', signal }).then(r => {\n          if (!r.ok) throw new Error(`Network error for ${url}`);\n          return r.json();\n        })\n      )\n    )\n      .then(([insightsData, accountsData, transactionsData]) => {\n        setCategories(insightsData);\n        setAccounts(accountsData);\n        setTransactions(transactionsData);\n      })\n      .catch(error => {\n        // If error is an AbortError, we can ignore it.\n        if (error.name !== 'AbortError') {\n          console.error(\"Error fetching data:\", error);\n          setLoading(false);\n        }\n      });\n  \n    // Cleanup function to abort fetches on unmount.\n    return () => controller.abort();\n  }, [user]);\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //     fetch(`/api/insights`,{\n  //       method: 'GET',\n  //       credentials: 'include'\n  //     })\n  //     .then((r) => r.json())\n  //     .then(insightsData => {\n  //     setCategories(insightsData);\n  //   }).catch(error => {\n  //     console.log(\"Error fetching insights\", error)\n  //     setLoading(false);\n      \n  //   });\n  // }, [user]);\n\n\n  // useEffect(() => {\n  //   if (!user) return;\n  //   fetch(`/api/accounts`,{\n  //     method: 'GET',\n  //     credentials: 'include'\n  //   })\n  //   .then((r) => r.json())\n  //   .then(accounts => {\n  //     setAccounts(accounts);\n  // }).catch(error => {\n  //   console.log(\"Error in fetching banks\", error)\n  //   setLoading(false);\n    \n  // });\n  // }, [user]);\n  \n  useEffect(() => {\n    if (!user) return;\n    fetch(`/api/banks`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n    .then((r) => r.json())\n    .then(banks => {\n      setBanks(banks);\n  }).catch(error => {\n    console.log(\"Error in fetching banks\", error)\n    setLoading(false);\n    \n  });\n}, []);\n\n \n\n\n// useEffect(() => {\n//   if (!user) return;\n//   fetch(`/api/transactions`,{\n//     method: 'GET',\n//     credentials: 'include'\n//   })\n//   .then((r) => r.json())\n//   .then(transactions => {\n//     setTransactions(transactions);\n// }).catch(error => {\n//   console.log(\"Error in fetching banks\", error)\n//   setLoading(false);\n  \n// });\n// }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/check_session`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log(\"Session response:\", data);\n        \n        // Check if data contains a valid user_id or similar flag\n        if (data.id) {\n          setUser(data);\n          console.log(data)\n        } else {\n          setUser(null);\n        }\n      })\n      .catch(error => {\n        console.error(\"Error fetching session:\", error);\n        setUser(null);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed(id) {\n    fetch(`/api/transactionseed`, {\n        method: 'POST', \n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json',  \n        },\n        body: JSON.stringify({ id }),\n    })\n    .then(response => response.json())\n    .then(document.location.reload())\n    .catch(error => console.error('Error:', error)); \n}\n  \n      \n\n  return (\n    <AppContext.Provider value={{loading,\n     transactions,\n     banks,\n     accounts,\n     categories,\n     user,\n     setUser,\n     setLoading,\n     setCategories,\n     handleLogin,\n     errors,\n     handleTransactionSeed,\n     mockLogin, API_URL }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAS,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnE,MAAMC,UAAU,gBAAGL,aAAa,CAAC,CAAC;AAClC,MAAMM,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAACc,SAAS,CAAC;EAC3C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAEpD,SAAS2B,WAAWA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,EAAE;IAEhEC,KAAK,CAAC,YAAY,EAAE;MAClBC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,QAAQ;QAAEC;MAAS,CAAC;IAC7C,CAAC,CAAC,CACCU,IAAI,CAAEC,CAAC,IAAK;MACX,IAAIA,CAAC,CAACC,EAAE,EAAE;QACRD,CAAC,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAE3B,IAAI,IAAK;UACtBC,OAAO,CAACD,IAAI,CAAC;UACbmB,QAAQ,CAAC,GAAG,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,MAAM;QACLS,CAAC,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,GAAG,IAAK;UACrBvB,SAAS,CAAC,CAACuB,GAAG,CAACC,OAAO,IAAI,8CAA8C,CAAC,CAAC;QAC5E,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,CACDC,KAAK,CAAEF,GAAG,IAAK;MACdvB,SAAS,CAAC,CAACuB,GAAG,CAACC,OAAO,IAAI,wCAAwC,CAAC,CAAC;IACtE,CAAC,CAAC,CACDE,OAAO,CAAC,MAAI;MACXhB,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC,CAAC;EAEN;EACA;EACA,SAASiB,SAASA,CAACnB,QAAQ,EAAEC,QAAQ,EAAEE,QAAQ,EAAE;IAC/CC,KAAK,CAAC,YAAY,EAAE;MAClBC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,QAAQ;QAAEC;MAAS,CAAC;IAC7C,CAAC,CAAC,CACCU,IAAI,CAAEC,CAAC,IAAK;MACX,IAAIA,CAAC,CAACC,EAAE,EAAE;QACRD,CAAC,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAE3B,IAAI,IAAK;UACtBC,OAAO,CAACD,IAAI,CAAC;UACbmB,QAAQ,CAAC,GAAG,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,MAAM;QACLS,CAAC,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,GAAG,IAAK;UACrBvB,SAAS,CAAC,CAACuB,GAAG,CAACC,OAAO,IAAI,8CAA8C,CAAC,CAAC;QAC5E,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,CACDC,KAAK,CAAEF,GAAG,IAAK;MACdvB,SAAS,CAAC,CAACuB,GAAG,CAACC,OAAO,IAAI,wCAAwC,CAAC,CAAC;IACtE,CAAC,CAAC;EAEN;EACA3C,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,IAAI,EAAE;;IAEX;IACA,MAAMoC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGF,UAAU,CAACE,MAAM;;IAEhC;IACA,MAAMC,SAAS,GAAG,CAChB;MAAEC,GAAG,EAAE,eAAe;MAAEC,MAAM,EAAErC,aAAa;MAAEsC,QAAQ,EAAE;IAA0B,CAAC,EACpF;MAAEF,GAAG,EAAE,eAAe;MAAEC,MAAM,EAAE7B,WAAW;MAAE8B,QAAQ,EAAE;IAA0B,CAAC,EAClF;MAAEF,GAAG,EAAE,mBAAmB;MAAEC,MAAM,EAAE3B,eAAe;MAAE4B,QAAQ,EAAE;IAA8B,CAAC,CAC/F;IAEDC,OAAO,CAACC,GAAG,CACTL,SAAS,CAACM,GAAG,CAAC,CAAC;MAAEL;IAAI,CAAC,KACpBpB,KAAK,CAACoB,GAAG,EAAE;MAAEnB,MAAM,EAAE,KAAK;MAAEC,WAAW,EAAE,SAAS;MAAEgB;IAAO,CAAC,CAAC,CAACX,IAAI,CAACC,CAAC,IAAI;MACtE,IAAI,CAACA,CAAC,CAACC,EAAE,EAAE,MAAM,IAAIiB,KAAK,CAAC,qBAAqBN,GAAG,EAAE,CAAC;MACtD,OAAOZ,CAAC,CAACE,IAAI,CAAC,CAAC;IACjB,CAAC,CACH,CACF,CAAC,CACEH,IAAI,CAAC,CAAC,CAACoB,YAAY,EAAEC,YAAY,EAAEC,gBAAgB,CAAC,KAAK;MACxD7C,aAAa,CAAC2C,YAAY,CAAC;MAC3BnC,WAAW,CAACoC,YAAY,CAAC;MACzBlC,eAAe,CAACmC,gBAAgB,CAAC;IACnC,CAAC,CAAC,CACDhB,KAAK,CAACiB,KAAK,IAAI;MACd;MACA,IAAIA,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;QAC/BC,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C5C,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;;IAEJ;IACA,OAAO,MAAM8B,UAAU,CAACiB,KAAK,CAAC,CAAC;EACjC,CAAC,EAAE,CAACrD,IAAI,CAAC,CAAC;;EAEV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEAX,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,IAAI,EAAE;IACXoB,KAAK,CAAC,YAAY,EAAC;MACjBC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE;IACf,CAAC,CAAC,CACDK,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,CACrBH,IAAI,CAAClB,KAAK,IAAI;MACbC,QAAQ,CAACD,KAAK,CAAC;IACnB,CAAC,CAAC,CAACwB,KAAK,CAACiB,KAAK,IAAI;MAChBE,OAAO,CAACE,GAAG,CAAC,yBAAyB,EAAEJ,KAAK,CAAC;MAC7C5C,UAAU,CAAC,KAAK,CAAC;IAEnB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAKN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEEjB,SAAS,CAAC,MAAM;IACdiB,UAAU,CAAC,IAAI,CAAC;IAChBc,KAAK,CAAC,oBAAoB,EAAC;MACzBC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE;IACf,CAAC,CAAC,CACCK,IAAI,CAAC4B,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAAC1B,EAAE,EAAE;QAChB,MAAM,IAAIiB,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOS,QAAQ,CAACzB,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDH,IAAI,CAAC6B,IAAI,IAAI;MACZJ,OAAO,CAACE,GAAG,CAAC,mBAAmB,EAAEE,IAAI,CAAC;;MAEtC;MACA,IAAIA,IAAI,CAACC,EAAE,EAAE;QACXxD,OAAO,CAACuD,IAAI,CAAC;QACbJ,OAAO,CAACE,GAAG,CAACE,IAAI,CAAC;MACnB,CAAC,MAAM;QACLvD,OAAO,CAAC,IAAI,CAAC;MACf;IACF,CAAC,CAAC,CACDgC,KAAK,CAACiB,KAAK,IAAI;MACdE,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CjD,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC,CACDiC,OAAO,CAAC,MAAM;MACb5B,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASoD,qBAAqBA,CAACD,EAAE,EAAE;IACjCrC,KAAK,CAAC,sBAAsB,EAAE;MAC1BC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE+B;MAAG,CAAC;IAC/B,CAAC,CAAC,CACD9B,IAAI,CAAC4B,QAAQ,IAAIA,QAAQ,CAACzB,IAAI,CAAC,CAAC,CAAC,CACjCH,IAAI,CAACgC,QAAQ,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAChC5B,KAAK,CAACiB,KAAK,IAAIE,OAAO,CAACF,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACnD;EAIE,oBACE3D,OAAA,CAACC,UAAU,CAACsE,QAAQ;IAACC,KAAK,EAAE;MAAC1D,OAAO;MACnCQ,YAAY;MACZJ,KAAK;MACLE,QAAQ;MACRR,UAAU;MACVH,IAAI;MACJC,OAAO;MACPK,UAAU;MACVF,aAAa;MACbW,WAAW;MACXR,MAAM;MACNmD,qBAAqB;MACrBvB,SAAS;MAAE1C;IAAQ,CAAE;IAAAK,QAAA,EACnBA;EAAQ;IAAAkE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAACpE,EAAA,CA/OWF,WAAW;AAAAuE,EAAA,GAAXvE,WAAW;AAiPxB,eAAeL,UAAU;AAAC,IAAA4E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}