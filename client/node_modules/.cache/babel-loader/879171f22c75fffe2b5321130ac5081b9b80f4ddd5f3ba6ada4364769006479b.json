{"ast":null,"code":"var _jsxFileName = \"/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(undefined);\n  const [insights, setinsights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [errorState, setErrorState] = useState(false);\n  const [banks, setBanks] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [deleteState, setDeleteState] = useState(false);\n  function handleLogin(username, password, setSubmitting, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      console.log(r);\n      if (r.ok) {\n        r.json().then(user => {\n          console.log(\"User\", user);\n          setUser(user);\n          setAccounts(user.accounts);\n          setTransactions(user.transactions);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(user => {\n          setUser(user);\n          setUser(user);\n          setAccounts(user.accounts);\n          const transactionsList = user.accounts.reduce((acc, account) => {\n            return [...acc, ...account.transactions];\n          });\n          setTransactions(transactionsList);\n          console.log(transactions);\n          navigate('/');\n        });\n      } else {\n        r.json().then(err => {\n          setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    });\n  }\n  useEffect(() => {\n    let transactionCategories = [];\n    accounts.forEach(account => {\n      account.transactions.forEach(transaction => {\n        if (transaction.type = \"Negative\") {\n          if (transactionCategories[transaction.category]) {\n            transactionCategories[transaction.category] += transaction.amount;\n          } else {\n            transactionCategories[transaction.category] = transaction.amount;\n          }\n        }\n      });\n    });\n    setinsights(transactionCategories);\n  }, [user]);\n  useEffect(() => {\n    if (!user) return;\n    fetch(`/api/banks`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(r => r.json()).then(banks => {\n      setBanks(banks);\n    }).catch(error => {\n      console.log(\"Error in fetching banks\", error);\n      setLoading(false);\n    });\n  }, [user]);\n  function handleNewAccountSubmission(bank_name, account_value, account_type, cardNumber, setSubmitting, navigate) {\n    console.log(account_type);\n    fetch(`/api/accounts`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        bank_name,\n        account_value,\n        account_type,\n        cardNumber\n      })\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(data => {\n          setAccounts([...accounts, data]);\n          navigate('/accounts');\n        });\n      } else {\n        r.json().then(err => {\n          setSubmitting(false);\n          setErrorState(true);\n          console.log(err.message);\n          setErrors(err);\n        });\n      }\n    }).catch(err => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    });\n  }\n  function handleAccountDeletion(navigate, id) {\n    fetch(`/api/singular_account/${id}`, {\n      method: \"DELETE\"\n    }).then(() => setDeleteState(true)).then(() => {\n      const newAccountSet = accounts.filter(account => parseInt(account.id) !== parseInt(id));\n      setAccounts(newAccountSet);\n    }).then(navigate('/accounts'));\n  }\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/check_session`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Session response:\", data);\n\n      // Check if data contains a valid user_id or similar flag\n      if (data.id) {\n        setUser(data);\n        setAccounts(data.accounts);\n        const transactionsList = data.accounts.reduce((acc, account) => {\n          return [...acc, ...account.transactions];\n        }, []);\n        setTransactions(transactionsList);\n      } else {\n        setUser(null);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching session:\", error);\n      setUser(null);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed(id) {\n    fetch(`/api/transactionseed`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    }).then(response => response.json()).then(data => {\n      const accountID = data[0]['account_id'];\n      setTransactions([...transactions, ...data]);\n      const accountToUpdate = accounts.find(account => parseInt(account.id) === parseInt(accountID));\n      if (accountToUpdate) {\n        // Create a new transactions array for the matching account\n        const updatedTransactions = [...accountToUpdate.transactions, ...data];\n\n        // Map over accounts to update the correct account immutably\n        const updatedAccounts = accounts.map(account => parseInt(account.id) === parseInt(accountID) ? {\n          ...account,\n          transactions: updatedTransactions\n        } : account);\n        setAccounts(updatedAccounts);\n      }\n    }).catch(error => console.error('Error:', error));\n  }\n  const handleTransactionDelete = (transactionID, accountID) => {\n    fetch(`/api/transaction/${transactionID}`, {\n      method: 'DELETE'\n    }).then(() => {\n      const newTransactionList = transactions.filter(transaction => parseInt(transaction.id) !== parseInt(transactionID));\n      setTransactions(newTransactionList);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      transactions,\n      banks,\n      accounts,\n      user,\n      setUser,\n      setLoading,\n      handleLogin,\n      deleteState,\n      handleAccountDeletion,\n      insights,\n      errors,\n      errorState,\n      handleTransactionSeed,\n      handleNewAccountSubmission,\n      handleTransactionDelete,\n      mockLogin,\n      API_URL\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"1x8J646UibfjndjnDDQ60gNvKtM=\");\n_c = AppProvider;\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AppContext","API_URL","process","env","REACT_APP_API_URL","AppProvider","children","_s","user","setUser","undefined","insights","setinsights","loading","setLoading","errors","setErrors","errorState","setErrorState","banks","setBanks","accounts","setAccounts","transactions","setTransactions","deleteState","setDeleteState","handleLogin","username","password","setSubmitting","navigate","fetch","method","credentials","headers","body","JSON","stringify","then","r","console","log","ok","json","err","message","catch","finally","mockLogin","transactionsList","reduce","acc","account","transactionCategories","forEach","transaction","type","category","amount","error","handleNewAccountSubmission","bank_name","account_value","account_type","cardNumber","data","handleAccountDeletion","id","newAccountSet","filter","parseInt","response","Error","handleTransactionSeed","accountID","accountToUpdate","find","updatedTransactions","updatedAccounts","map","handleTransactionDelete","transactionID","newTransactionList","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect  } from 'react';\n\n\nconst AppContext = createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState(undefined);\n  const [insights, setinsights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [errorState, setErrorState] = useState(false)\n  const [banks, setBanks] = useState([])\n  const [accounts, setAccounts] = useState([])\n  const [transactions, setTransactions] = useState([])\n  const [deleteState, setDeleteState] = useState(false)\n\n  function handleLogin(username, password, setSubmitting, navigate) {\n    \n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        console.log(r)\n        if (r.ok) {\n          r.json().then((user) => {\n            console.log(\"User\", user)\n            setUser(user)\n            setAccounts(user.accounts)\n            setTransactions(user.transactions)\n            navigate('/');\n          })\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      .finally(()=>{\n        setSubmitting(false)\n      })\n      \n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((user) => {\n            setUser(user);\n            setUser(user)\n            setAccounts(user.accounts)\n\n            const transactionsList = user.accounts.reduce((acc, account) => {\n              return [...acc, ...account.transactions]})\n\n            setTransactions(transactionsList)\n            console.log(transactions)\n            navigate('/')\n          });\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      \n  }\n  useEffect(()=>{\n  let transactionCategories =[]\n  accounts.forEach(account => {\n    account.transactions.forEach((transaction)=>{\n      if (transaction.type = \"Negative\"){\n        if (transactionCategories[transaction.category]){\n          transactionCategories[transaction.category] += transaction.amount;\n        }\n        else{\n          transactionCategories[transaction.category] = transaction.amount;\n        }\n      }\n    })\n  })\n  setinsights(transactionCategories)\n  },[user])\n  \n  useEffect(() => {\n    if (!user) return;\n    fetch(`/api/banks`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n    .then((r) => r.json())\n    .then(banks => {\n      setBanks(banks);\n  }).catch(error => {\n    console.log(\"Error in fetching banks\", error)\n    setLoading(false);\n    \n  });\n}, [user]);\n\nfunction handleNewAccountSubmission(bank_name,\n  account_value,\n  account_type,\n  cardNumber,\n  setSubmitting,\n  navigate) {\n    console.log(account_type)\n  fetch(`/api/accounts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    credentials: 'include',\n    body: JSON.stringify({bank_name, account_value, account_type, cardNumber}),\n  })\n    .then((r) => {\n      if (r.ok){\n        r.json().then((data)=>{\n          setAccounts([...accounts, data])\n          navigate('/accounts')\n        })\n      }\n      else {\n        r.json().then((err)=>{\n          setSubmitting(false)\n          setErrorState(true)\n          console.log(err.message)\n          setErrors(err)\n\n        })\n      }\n    })\n    .catch((err) => {\n      setErrors([err.message || \"Network error. Please try again later.\"]);\n    })\n    \n}\n\n\n  function handleAccountDeletion(navigate, id){\n    fetch(`/api/singular_account/${id}`,{\n      method:\"DELETE\"\n    })\n    .then(()=>setDeleteState(true))\n    .then(()=>{\n      const newAccountSet = accounts.filter((account)=>parseInt(account.id) !== parseInt(id))\n      setAccounts(newAccountSet)\n      \n      })\n      .then(navigate('/accounts'))\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/check_session`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log(\"Session response:\", data);\n        \n        // Check if data contains a valid user_id or similar flag\n        if (data.id) {\n          setUser(data);\n          setAccounts(data.accounts);\n          const transactionsList = data.accounts.reduce((acc, account) => {\n            return [...acc, ...account.transactions];\n          }, []);\n          setTransactions(transactionsList);\n        } else {\n          setUser(null);\n        }\n      })\n      .catch(error => {\n        console.error(\"Error fetching session:\", error);\n        setUser(null);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed(id) {\n    fetch(`/api/transactionseed`, {\n        method: 'POST', \n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json',  \n        },\n        body: JSON.stringify({ id }),\n    })\n    .then(response => response.json())\n    .then(data=>{\n      const accountID = data[0]['account_id']\n      setTransactions([...transactions, ...data])\n      const accountToUpdate = accounts.find(account => parseInt(account.id) === parseInt(accountID));\n\n      if (accountToUpdate) {\n        // Create a new transactions array for the matching account\n        const updatedTransactions = [...accountToUpdate.transactions, ...data];\n\n        // Map over accounts to update the correct account immutably\n        const updatedAccounts = accounts.map(account => \n          parseInt(account.id) === parseInt(accountID)\n            ? { ...account, transactions: updatedTransactions }\n            : account\n        );\n\n        setAccounts(updatedAccounts);\n      }\n\n\n    }\n      \n    )\n    .catch(error => console.error('Error:', error)); \n}\n  \nconst handleTransactionDelete=(transactionID, accountID)=>{\n  fetch(`/api/transaction/${transactionID}`, { method: 'DELETE' })\n  .then(() => {\n    const newTransactionList = transactions.filter(transaction=>parseInt(transaction.id) !==parseInt(transactionID))\n    setTransactions(newTransactionList)\n\n  })\n}\n      \n\n  return (\n    <AppContext.Provider value={{loading,\n     transactions,\n     banks,\n     accounts,\n     user,\n     setUser,\n     setLoading,\n     handleLogin,\n     deleteState,\n     handleAccountDeletion,\n     insights,\n     errors,\n     errorState,\n     handleTransactionSeed,\n     handleNewAccountSubmission,\n     handleTransactionDelete,\n     mockLogin, \n     API_URL }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}