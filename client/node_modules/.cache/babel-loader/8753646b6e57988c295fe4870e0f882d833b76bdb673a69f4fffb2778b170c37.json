{"ast":null,"code":"import _objectSpread from\"/home/jacob/development/code/phase-5/p5-project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=/*#__PURE__*/createContext();const API_URL=process.env.REACT_APP_API_URL;export const AppProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(undefined);const[insights,setinsights]=useState([]);const[loading,setLoading]=useState(true);const[errors,setErrors]=useState([]);const[errorState,setErrorState]=useState(false);const[banks,setBanks]=useState([]);const[accounts,setAccounts]=useState([]);const[transactions,setTransactions]=useState([]);const[deleteState,setDeleteState]=useState(false);function handleLogin(username,password,setSubmitting,navigate){fetch(\"/api/login\",{method:\"POST\",credentials:'include',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({username,password})}).then(r=>{if(r.ok){r.json().then(data=>{setUser(data);setAccounts(data.accounts);const transactionsList=data.accounts.reduce((acc,account)=>{return[...acc,...account.transactions];},[]);setTransactions(transactionsList);navigate('/');});}else{r.json().then(err=>{setErrors([err.message||\"Invalid login credentials. Please try again.\"]);});}}).catch(err=>{setErrors([err.message||\"Network error. Please try again later.\"]);}).finally(()=>{setSubmitting(false);});}// this is for the login without signup\nfunction mockLogin(username,password,navigate){fetch(\"/api/login\",{method:\"POST\",credentials:'include',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({username,password})}).then(r=>{if(r.ok){r.json().then(data=>{setUser(data);setAccounts(data.accounts);const transactionsList=data.accounts.reduce((acc,account)=>{return[...acc,...account.transactions];},[]);setTransactions(transactionsList);navigate('/');});}else{r.json().then(err=>{setErrors([err.message||\"Invalid login credentials. Please try again.\"]);});}}).catch(err=>{setErrors([err.message||\"Network error. Please try again later.\"]);});}useEffect(()=>{let transactionCategories=[];accounts.forEach(account=>{account.transactions.forEach(transaction=>{if(transaction.type=\"Negative\"){if(transactionCategories[transaction.category]){transactionCategories[transaction.category]+=transaction.amount;}else{transactionCategories[transaction.category]=transaction.amount;}}});});setinsights(transactionCategories);},[user,accounts]);function handleNewAccountSubmission(bank_name,account_value,account_type,cardNumber,setSubmitting,navigate){console.log(account_type);fetch(\"/api/accounts\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},credentials:'include',body:JSON.stringify({bank_name,account_value,account_type,cardNumber})}).then(r=>{if(r.ok){r.json().then(data=>{setAccounts([...accounts,data]);navigate('/accounts');});}else{r.json().then(err=>{setSubmitting(false);setErrorState(true);setErrors(err);});}}).catch(err=>{setErrors([err||\"Network error. Please try again later.\"]);});}function handleAccountDeletion(navigate,id){fetch(\"/api/singular_account/\".concat(id),{method:\"DELETE\"}).then(()=>setDeleteState(true)).then(()=>{setLoading(true);navigate('/accounts');const newAccountSet=accounts.filter(account=>parseInt(account.id)!==parseInt(id));setAccounts(newAccountSet);console.log(accounts);setLoading(false);});}useEffect(()=>{setLoading(true);fetch(\"/api/check_session\",{method:'GET',credentials:'include'}).then(response=>{if(!response.ok){throw new Error('Network response was not ok');}return response.json();}).then(data=>{// Check if data contains a valid user_id or similar flag\nif(data.id){setUser(data);setAccounts(data.accounts);const transactionsList=data.accounts.reduce((acc,account)=>{return[...acc,...account.transactions];},[]);setTransactions(transactionsList);console.log(\"Transactions\",transactionsList);}else{setUser(null);}}).catch(error=>{console.error(\"Error fetching session:\",error);setUser(null);}).finally(()=>{setLoading(false);});},[]);// this will seed transactions on individual account pages\nfunction handleTransactionSeed(id){fetch(\"/api/transactionseed\",{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({id})}).then(response=>response.json()).then(data=>{console.log(data);const accountID=data[0]['account_id'];setTransactions([...transactions,...data]);const accountToUpdate=accounts.find(account=>parseInt(account.id)===parseInt(accountID));if(accountToUpdate){// Create a new transactions array for the matching account\nconst updatedTransactions=[...accountToUpdate.transactions,...data];// Map over accounts to update the correct account immutably\nconst updatedAccounts=accounts.map(account=>parseInt(account.id)===parseInt(accountID)?_objectSpread(_objectSpread({},account),{},{transactions:updatedTransactions}):account);setAccounts(updatedAccounts);}}).catch(error=>console.error('Error:',error));}const handleTransactionDelete=(transactionID,accountID)=>{fetch(\"/api/transaction/\".concat(transactionID),{method:'DELETE'}).then(()=>{const newTransactionList=transactions.filter(transaction=>parseInt(transaction.id)!==parseInt(transactionID));setTransactions(newTransactionList);});};return/*#__PURE__*/_jsx(AppContext.Provider,{value:{loading,transactions,banks,accounts,user,setUser,setLoading,handleLogin,deleteState,handleAccountDeletion,insights,errors,errorState,handleTransactionSeed,handleNewAccountSubmission,handleTransactionDelete,mockLogin,API_URL},children:children});};export default AppContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","AppContext","API_URL","process","env","REACT_APP_API_URL","AppProvider","_ref","children","user","setUser","undefined","insights","setinsights","loading","setLoading","errors","setErrors","errorState","setErrorState","banks","setBanks","accounts","setAccounts","transactions","setTransactions","deleteState","setDeleteState","handleLogin","username","password","setSubmitting","navigate","fetch","method","credentials","headers","body","JSON","stringify","then","r","ok","json","data","transactionsList","reduce","acc","account","err","message","catch","finally","mockLogin","transactionCategories","forEach","transaction","type","category","amount","handleNewAccountSubmission","bank_name","account_value","account_type","cardNumber","console","log","handleAccountDeletion","id","concat","newAccountSet","filter","parseInt","response","Error","error","handleTransactionSeed","accountID","accountToUpdate","find","updatedTransactions","updatedAccounts","map","_objectSpread","handleTransactionDelete","transactionID","newTransactionList","Provider","value"],"sources":["/home/jacob/development/code/phase-5/p5-project/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect  } from 'react';\n\n\nconst AppContext = createContext();\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState(undefined);\n  const [insights, setinsights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const [errorState, setErrorState] = useState(false)\n  const [banks, setBanks] = useState([])\n  const [accounts, setAccounts] = useState([])\n  const [transactions, setTransactions] = useState([])\n  const [deleteState, setDeleteState] = useState(false)\n\n  function handleLogin(username, password, setSubmitting, navigate) {\n    \n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((data) => {\n            setUser(data)\n            setAccounts(data.accounts)\n\n            const transactionsList = data.accounts.reduce((acc, account) => {\n              return [...acc, ...account.transactions];\n            }, []);\n\n            setTransactions(transactionsList)\n            navigate('/')\n          })\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      .finally(()=>{\n        setSubmitting(false)\n      })\n      \n  }\n  // this is for the login without signup\n  function mockLogin(username, password, navigate) {\n    fetch(`/api/login`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((r) => {\n        if (r.ok) {\n          r.json().then((data) => {\n            setUser(data)\n            setAccounts(data.accounts)\n\n            const transactionsList = data.accounts.reduce((acc, account) => {\n              return [...acc, ...account.transactions];\n            }, []);\n\n            setTransactions(transactionsList)\n            navigate('/')\n          });\n        } else {\n          r.json().then((err) => {\n            setErrors([err.message || \"Invalid login credentials. Please try again.\"]);\n          });\n        }\n      })\n      .catch((err) => {\n        setErrors([err.message || \"Network error. Please try again later.\"]);\n      })\n      \n  }\n  useEffect(()=>{\n  let transactionCategories =[]\n  accounts.forEach(account => {\n    account.transactions.forEach((transaction)=>{\n      if (transaction.type = \"Negative\"){\n        if (transactionCategories[transaction.category]){\n          transactionCategories[transaction.category] += transaction.amount;\n        }\n        else{\n          transactionCategories[transaction.category] = transaction.amount;\n        }\n      }\n    })\n  })\n  setinsights(transactionCategories)\n  },[user, accounts])\n  \n\n\nfunction handleNewAccountSubmission(bank_name,\n  account_value,\n  account_type,\n  cardNumber,\n  setSubmitting,\n  navigate) {\n    console.log(account_type)\n  fetch(`/api/accounts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    credentials: 'include',\n    body: JSON.stringify({bank_name, account_value, account_type, cardNumber}),\n  })\n    .then((r) => {\n      if (r.ok){\n        r.json()\n        .then((data)=>{\n          setAccounts([...accounts, data])\n          navigate('/accounts')\n        })\n      }\n      else {\n        r.json().then((err)=>{\n          setSubmitting(false)\n          setErrorState(true)\n          setErrors(err)\n\n        })\n      }\n    })\n    .catch((err) => {\n\n      setErrors([err || \"Network error. Please try again later.\"]);\n    })\n    \n}\n\n\n  function handleAccountDeletion(navigate, id){\n    fetch(`/api/singular_account/${id}`,{\n      method:\"DELETE\"\n    })\n    .then(()=>setDeleteState(true))\n    .then(()=>{\n      setLoading(true)\n      navigate('/accounts')\n      const newAccountSet = accounts.filter((account)=>parseInt(account.id) !== parseInt(id))\n      setAccounts(newAccountSet)\n      console.log(accounts)\n      setLoading(false)}\n      \n      )\n      \n  }\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/check_session`,{\n      method: 'GET',\n      credentials: 'include'\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        \n        // Check if data contains a valid user_id or similar flag\n        if (data.id) {\n          setUser(data);\n          setAccounts(data.accounts);\n          const transactionsList = data.accounts.reduce((acc, account) => {\n            return [...acc, ...account.transactions];\n          }, []);\n          setTransactions(transactionsList);\n          console.log(\"Transactions\", transactionsList)\n        } else {\n          setUser(null);\n        }\n      })\n      .catch(error => {\n        console.error(\"Error fetching session:\", error);\n        setUser(null);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  // this will seed transactions on individual account pages\n  function handleTransactionSeed(id) {\n    fetch(`/api/transactionseed`, {\n        method: 'POST', \n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json',  \n        },\n        body: JSON.stringify({ id }),\n    })\n    .then(response => response.json())\n    .then(data=>{\n      console.log(data)\n      const accountID = data[0]['account_id']\n      setTransactions([...transactions, ...data])\n      const accountToUpdate = accounts.find(account => parseInt(account.id) === parseInt(accountID));\n\n      if (accountToUpdate) {\n        // Create a new transactions array for the matching account\n        const updatedTransactions = [...accountToUpdate.transactions, ...data];\n\n        // Map over accounts to update the correct account immutably\n        const updatedAccounts = accounts.map(account => \n          parseInt(account.id) === parseInt(accountID)\n            ? { ...account, transactions: updatedTransactions }\n            : account\n        );\n\n        setAccounts(updatedAccounts);\n      }\n\n\n    }\n      \n    )\n    .catch(error => console.error('Error:', error)); \n}\n  \nconst handleTransactionDelete=(transactionID, accountID)=>{\n  fetch(`/api/transaction/${transactionID}`, { method: 'DELETE' })\n  .then(() => {\n    const newTransactionList = transactions.filter(transaction=>parseInt(transaction.id) !==parseInt(transactionID))\n    setTransactions(newTransactionList)\n\n  })\n}\n      \n\n  return (\n    <AppContext.Provider value={{loading,\n     transactions,\n     banks,\n     accounts,\n     user,\n     setUser,\n     setLoading,\n     handleLogin,\n     deleteState,\n     handleAccountDeletion,\n     insights,\n     errors,\n     errorState,\n     handleTransactionSeed,\n     handleNewAccountSubmission,\n     handleTransactionDelete,\n     mockLogin, \n     API_URL }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}